// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v3.21.12
// source: node.proto

package protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegisterRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	MemberId      string                 `protobuf:"bytes,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	Address       string                 `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	TotalCapacity int64                  `protobuf:"varint,4,opt,name=total_capacity,json=totalCapacity,proto3" json:"total_capacity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	mi := &file_node_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *RegisterRequest) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *RegisterRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *RegisterRequest) GetTotalCapacity() int64 {
	if x != nil {
		return x.TotalCapacity
	}
	return 0
}

type RegisterResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	CoordinatorId string                 `protobuf:"bytes,2,opt,name=coordinator_id,json=coordinatorId,proto3" json:"coordinator_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterResponse) Reset() {
	*x = RegisterResponse{}
	mi := &file_node_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResponse) ProtoMessage() {}

func (x *RegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResponse.ProtoReflect.Descriptor instead.
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RegisterResponse) GetCoordinatorId() string {
	if x != nil {
		return x.CoordinatorId
	}
	return ""
}

type UnregisterRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnregisterRequest) Reset() {
	*x = UnregisterRequest{}
	mi := &file_node_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnregisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnregisterRequest) ProtoMessage() {}

func (x *UnregisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnregisterRequest.ProtoReflect.Descriptor instead.
func (*UnregisterRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{2}
}

func (x *UnregisterRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type UnregisterResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnregisterResponse) Reset() {
	*x = UnregisterResponse{}
	mi := &file_node_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnregisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnregisterResponse) ProtoMessage() {}

func (x *UnregisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnregisterResponse.ProtoReflect.Descriptor instead.
func (*UnregisterResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{3}
}

func (x *UnregisterResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type StoreChunkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	Data          []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	FileId        string                 `protobuf:"bytes,3,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	Index         int32                  `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoreChunkRequest) Reset() {
	*x = StoreChunkRequest{}
	mi := &file_node_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoreChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreChunkRequest) ProtoMessage() {}

func (x *StoreChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreChunkRequest.ProtoReflect.Descriptor instead.
func (*StoreChunkRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{4}
}

func (x *StoreChunkRequest) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *StoreChunkRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *StoreChunkRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *StoreChunkRequest) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type StoreChunkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ChunkId       string                 `protobuf:"bytes,2,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoreChunkResponse) Reset() {
	*x = StoreChunkResponse{}
	mi := &file_node_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoreChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreChunkResponse) ProtoMessage() {}

func (x *StoreChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreChunkResponse.ProtoReflect.Descriptor instead.
func (*StoreChunkResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{5}
}

func (x *StoreChunkResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *StoreChunkResponse) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

type RetrieveChunkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RetrieveChunkRequest) Reset() {
	*x = RetrieveChunkRequest{}
	mi := &file_node_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetrieveChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveChunkRequest) ProtoMessage() {}

func (x *RetrieveChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveChunkRequest.ProtoReflect.Descriptor instead.
func (*RetrieveChunkRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{6}
}

func (x *RetrieveChunkRequest) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

type RetrieveChunkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Data          []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RetrieveChunkResponse) Reset() {
	*x = RetrieveChunkResponse{}
	mi := &file_node_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetrieveChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveChunkResponse) ProtoMessage() {}

func (x *RetrieveChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveChunkResponse.ProtoReflect.Descriptor instead.
func (*RetrieveChunkResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{7}
}

func (x *RetrieveChunkResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RetrieveChunkResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteChunkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteChunkRequest) Reset() {
	*x = DeleteChunkRequest{}
	mi := &file_node_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChunkRequest) ProtoMessage() {}

func (x *DeleteChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChunkRequest.ProtoReflect.Descriptor instead.
func (*DeleteChunkRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteChunkRequest) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

type DeleteChunkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteChunkResponse) Reset() {
	*x = DeleteChunkResponse{}
	mi := &file_node_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChunkResponse) ProtoMessage() {}

func (x *DeleteChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChunkResponse.ProtoReflect.Descriptor instead.
func (*DeleteChunkResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteChunkResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type HealthCheckRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     int64                  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	mi := &file_node_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{10}
}

func (x *HealthCheckRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type HealthCheckResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Healthy       bool                   `protobuf:"varint,1,opt,name=healthy,proto3" json:"healthy,omitempty"`
	Timestamp     int64                  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	UsedCapacity  int64                  `protobuf:"varint,3,opt,name=used_capacity,json=usedCapacity,proto3" json:"used_capacity,omitempty"`
	TotalCapacity int64                  `protobuf:"varint,4,opt,name=total_capacity,json=totalCapacity,proto3" json:"total_capacity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	mi := &file_node_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{11}
}

func (x *HealthCheckResponse) GetHealthy() bool {
	if x != nil {
		return x.Healthy
	}
	return false
}

func (x *HealthCheckResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *HealthCheckResponse) GetUsedCapacity() int64 {
	if x != nil {
		return x.UsedCapacity
	}
	return 0
}

func (x *HealthCheckResponse) GetTotalCapacity() int64 {
	if x != nil {
		return x.TotalCapacity
	}
	return 0
}

type GetCapacityRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCapacityRequest) Reset() {
	*x = GetCapacityRequest{}
	mi := &file_node_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCapacityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCapacityRequest) ProtoMessage() {}

func (x *GetCapacityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCapacityRequest.ProtoReflect.Descriptor instead.
func (*GetCapacityRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{12}
}

type GetCapacityResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TotalCapacity     int64                  `protobuf:"varint,1,opt,name=total_capacity,json=totalCapacity,proto3" json:"total_capacity,omitempty"`
	UsedCapacity      int64                  `protobuf:"varint,2,opt,name=used_capacity,json=usedCapacity,proto3" json:"used_capacity,omitempty"`
	AvailableCapacity int64                  `protobuf:"varint,3,opt,name=available_capacity,json=availableCapacity,proto3" json:"available_capacity,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetCapacityResponse) Reset() {
	*x = GetCapacityResponse{}
	mi := &file_node_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCapacityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCapacityResponse) ProtoMessage() {}

func (x *GetCapacityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCapacityResponse.ProtoReflect.Descriptor instead.
func (*GetCapacityResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{13}
}

func (x *GetCapacityResponse) GetTotalCapacity() int64 {
	if x != nil {
		return x.TotalCapacity
	}
	return 0
}

func (x *GetCapacityResponse) GetUsedCapacity() int64 {
	if x != nil {
		return x.UsedCapacity
	}
	return 0
}

func (x *GetCapacityResponse) GetAvailableCapacity() int64 {
	if x != nil {
		return x.AvailableCapacity
	}
	return 0
}

type TransferChunkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	TargetNode    string                 `protobuf:"bytes,2,opt,name=target_node,json=targetNode,proto3" json:"target_node,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransferChunkRequest) Reset() {
	*x = TransferChunkRequest{}
	mi := &file_node_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferChunkRequest) ProtoMessage() {}

func (x *TransferChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferChunkRequest.ProtoReflect.Descriptor instead.
func (*TransferChunkRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{14}
}

func (x *TransferChunkRequest) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *TransferChunkRequest) GetTargetNode() string {
	if x != nil {
		return x.TargetNode
	}
	return ""
}

type TransferChunkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransferChunkResponse) Reset() {
	*x = TransferChunkResponse{}
	mi := &file_node_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferChunkResponse) ProtoMessage() {}

func (x *TransferChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferChunkResponse.ProtoReflect.Descriptor instead.
func (*TransferChunkResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{15}
}

func (x *TransferChunkResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_node_proto protoreflect.FileDescriptor

const file_node_proto_rawDesc = "" +
	"\n" +
	"\n" +
	"node.proto\x12\x10collective.proto\"\x88\x01\n" +
	"\x0fRegisterRequest\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\x12\x1b\n" +
	"\tmember_id\x18\x02 \x01(\tR\bmemberId\x12\x18\n" +
	"\aaddress\x18\x03 \x01(\tR\aaddress\x12%\n" +
	"\x0etotal_capacity\x18\x04 \x01(\x03R\rtotalCapacity\"S\n" +
	"\x10RegisterResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12%\n" +
	"\x0ecoordinator_id\x18\x02 \x01(\tR\rcoordinatorId\",\n" +
	"\x11UnregisterRequest\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\".\n" +
	"\x12UnregisterResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\"q\n" +
	"\x11StoreChunkRequest\x12\x19\n" +
	"\bchunk_id\x18\x01 \x01(\tR\achunkId\x12\x12\n" +
	"\x04data\x18\x02 \x01(\fR\x04data\x12\x17\n" +
	"\afile_id\x18\x03 \x01(\tR\x06fileId\x12\x14\n" +
	"\x05index\x18\x04 \x01(\x05R\x05index\"I\n" +
	"\x12StoreChunkResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x19\n" +
	"\bchunk_id\x18\x02 \x01(\tR\achunkId\"1\n" +
	"\x14RetrieveChunkRequest\x12\x19\n" +
	"\bchunk_id\x18\x01 \x01(\tR\achunkId\"E\n" +
	"\x15RetrieveChunkResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x12\n" +
	"\x04data\x18\x02 \x01(\fR\x04data\"/\n" +
	"\x12DeleteChunkRequest\x12\x19\n" +
	"\bchunk_id\x18\x01 \x01(\tR\achunkId\"/\n" +
	"\x13DeleteChunkResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\"2\n" +
	"\x12HealthCheckRequest\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x01(\x03R\ttimestamp\"\x99\x01\n" +
	"\x13HealthCheckResponse\x12\x18\n" +
	"\ahealthy\x18\x01 \x01(\bR\ahealthy\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\x03R\ttimestamp\x12#\n" +
	"\rused_capacity\x18\x03 \x01(\x03R\fusedCapacity\x12%\n" +
	"\x0etotal_capacity\x18\x04 \x01(\x03R\rtotalCapacity\"\x14\n" +
	"\x12GetCapacityRequest\"\x90\x01\n" +
	"\x13GetCapacityResponse\x12%\n" +
	"\x0etotal_capacity\x18\x01 \x01(\x03R\rtotalCapacity\x12#\n" +
	"\rused_capacity\x18\x02 \x01(\x03R\fusedCapacity\x12-\n" +
	"\x12available_capacity\x18\x03 \x01(\x03R\x11availableCapacity\"R\n" +
	"\x14TransferChunkRequest\x12\x19\n" +
	"\bchunk_id\x18\x01 \x01(\tR\achunkId\x12\x1f\n" +
	"\vtarget_node\x18\x02 \x01(\tR\n" +
	"targetNode\"1\n" +
	"\x15TransferChunkResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess2\xe3\x05\n" +
	"\x04Node\x12Q\n" +
	"\bRegister\x12!.collective.proto.RegisterRequest\x1a\".collective.proto.RegisterResponse\x12W\n" +
	"\n" +
	"Unregister\x12#.collective.proto.UnregisterRequest\x1a$.collective.proto.UnregisterResponse\x12W\n" +
	"\n" +
	"StoreChunk\x12#.collective.proto.StoreChunkRequest\x1a$.collective.proto.StoreChunkResponse\x12`\n" +
	"\rRetrieveChunk\x12&.collective.proto.RetrieveChunkRequest\x1a'.collective.proto.RetrieveChunkResponse\x12Z\n" +
	"\vDeleteChunk\x12$.collective.proto.DeleteChunkRequest\x1a%.collective.proto.DeleteChunkResponse\x12Z\n" +
	"\vHealthCheck\x12$.collective.proto.HealthCheckRequest\x1a%.collective.proto.HealthCheckResponse\x12Z\n" +
	"\vGetCapacity\x12$.collective.proto.GetCapacityRequest\x1a%.collective.proto.GetCapacityResponse\x12`\n" +
	"\rTransferChunk\x12&.collective.proto.TransferChunkRequest\x1a'.collective.proto.TransferChunkResponseB\x19Z\x17collective/pkg/protocolb\x06proto3"

var (
	file_node_proto_rawDescOnce sync.Once
	file_node_proto_rawDescData []byte
)

func file_node_proto_rawDescGZIP() []byte {
	file_node_proto_rawDescOnce.Do(func() {
		file_node_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_node_proto_rawDesc), len(file_node_proto_rawDesc)))
	})
	return file_node_proto_rawDescData
}

var file_node_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_node_proto_goTypes = []any{
	(*RegisterRequest)(nil),       // 0: collective.proto.RegisterRequest
	(*RegisterResponse)(nil),      // 1: collective.proto.RegisterResponse
	(*UnregisterRequest)(nil),     // 2: collective.proto.UnregisterRequest
	(*UnregisterResponse)(nil),    // 3: collective.proto.UnregisterResponse
	(*StoreChunkRequest)(nil),     // 4: collective.proto.StoreChunkRequest
	(*StoreChunkResponse)(nil),    // 5: collective.proto.StoreChunkResponse
	(*RetrieveChunkRequest)(nil),  // 6: collective.proto.RetrieveChunkRequest
	(*RetrieveChunkResponse)(nil), // 7: collective.proto.RetrieveChunkResponse
	(*DeleteChunkRequest)(nil),    // 8: collective.proto.DeleteChunkRequest
	(*DeleteChunkResponse)(nil),   // 9: collective.proto.DeleteChunkResponse
	(*HealthCheckRequest)(nil),    // 10: collective.proto.HealthCheckRequest
	(*HealthCheckResponse)(nil),   // 11: collective.proto.HealthCheckResponse
	(*GetCapacityRequest)(nil),    // 12: collective.proto.GetCapacityRequest
	(*GetCapacityResponse)(nil),   // 13: collective.proto.GetCapacityResponse
	(*TransferChunkRequest)(nil),  // 14: collective.proto.TransferChunkRequest
	(*TransferChunkResponse)(nil), // 15: collective.proto.TransferChunkResponse
}
var file_node_proto_depIdxs = []int32{
	0,  // 0: collective.proto.Node.Register:input_type -> collective.proto.RegisterRequest
	2,  // 1: collective.proto.Node.Unregister:input_type -> collective.proto.UnregisterRequest
	4,  // 2: collective.proto.Node.StoreChunk:input_type -> collective.proto.StoreChunkRequest
	6,  // 3: collective.proto.Node.RetrieveChunk:input_type -> collective.proto.RetrieveChunkRequest
	8,  // 4: collective.proto.Node.DeleteChunk:input_type -> collective.proto.DeleteChunkRequest
	10, // 5: collective.proto.Node.HealthCheck:input_type -> collective.proto.HealthCheckRequest
	12, // 6: collective.proto.Node.GetCapacity:input_type -> collective.proto.GetCapacityRequest
	14, // 7: collective.proto.Node.TransferChunk:input_type -> collective.proto.TransferChunkRequest
	1,  // 8: collective.proto.Node.Register:output_type -> collective.proto.RegisterResponse
	3,  // 9: collective.proto.Node.Unregister:output_type -> collective.proto.UnregisterResponse
	5,  // 10: collective.proto.Node.StoreChunk:output_type -> collective.proto.StoreChunkResponse
	7,  // 11: collective.proto.Node.RetrieveChunk:output_type -> collective.proto.RetrieveChunkResponse
	9,  // 12: collective.proto.Node.DeleteChunk:output_type -> collective.proto.DeleteChunkResponse
	11, // 13: collective.proto.Node.HealthCheck:output_type -> collective.proto.HealthCheckResponse
	13, // 14: collective.proto.Node.GetCapacity:output_type -> collective.proto.GetCapacityResponse
	15, // 15: collective.proto.Node.TransferChunk:output_type -> collective.proto.TransferChunkResponse
	8,  // [8:16] is the sub-list for method output_type
	0,  // [0:8] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_node_proto_init() }
func file_node_proto_init() {
	if File_node_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_node_proto_rawDesc), len(file_node_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_node_proto_goTypes,
		DependencyIndexes: file_node_proto_depIdxs,
		MessageInfos:      file_node_proto_msgTypes,
	}.Build()
	File_node_proto = out.File
	file_node_proto_goTypes = nil
	file_node_proto_depIdxs = nil
}
